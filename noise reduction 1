clear; close all; clc;

% 1. Generate or read the original signal
fs = 1000;                          % Sampling frequency (Hz)
t = 0:1/fs:1;                       % Time vector
x_clean = sin(2*pi*50*t) + sin(2*pi*120*t);  % Original signal (50Hz + 120Hz)
x_noisy = x_clean + 0.5*randn(size(t));      % Add noise to the signal

% 2. Wavelet decomposition and denoising
wname = 'db8';          % Wavelet name (Daubechies 8)
level = 5;              % Decomposition level
xd = wdenoise(x_noisy, level, 'Wavelet', wname);

% 3. Visualize results
figure;
subplot(3,1,1);
plot(t, x_clean); title('Original Signal'); xlabel('Time (s)');
subplot(3,1,2);
plot(t, x_noisy); title('Noisy Signal'); xlabel('Time (s)');
subplot(3,1,3);
plot(t, xd); title('Denoised Signal'); xlabel('Time (s)');

% 4. Compare signal-to-noise ratio (SNR)
snr_noisy = snr(x_clean, x_noisy - x_clean);
snr_denoised = snr(x_clean, xd - x_clean);
fprintf('SNR before denoising = %.2f dB\n', snr_noisy);
fprintf('SNR after denoising = %.2f dB\n', snr_denoised);
